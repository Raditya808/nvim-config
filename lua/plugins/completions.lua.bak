return {
<<<<<<< Updated upstream
	-- add blink.compat
	{
		"saghen/blink.compat",
		-- use the latest release, via version = '*', if you also use the latest release for blink.cmp
		version = "*",
		-- lazy.nvim will automatically load the plugin when it's required by blink.cmp
		lazy = true,
		-- make sure to set opts so that lazy.nvim calls blink.compat's setup
		opts = {},
	},
	-- Blink cmp
	{
		"Saghen/blink.cmp",
		dependencies = {
			"rafamadriz/friendly-snippets",
			"onsails/lspkind.nvim",
			"nvim-tree/nvim-web-devicons",
			{ "L3MON4D3/LuaSnip", version = "v2.*" },
		},
		Event = "InsertEnter",
		version = "1.*",

=======
	-- -- Autocompletion plugin
	{
		"hrsh7th/nvim-cmp",
		dependencies = {
			"hrsh7th/cmp-nvim-lsp", -- LSP source for nvim-cmp
			"hrsh7th/cmp-buffer", -- Buffer source for nvim-cmp
			"hrsh7th/cmp-path", -- Path source for nvim-cmp
			"hrsh7th/cmp-cmdline", -- Command-line source for nvim-cmp
			"saadparwaiz1/cmp_luasnip", -- Snippet source for nvim-cmp
			"L3MON4D3/LuaSnip", -- Snippet engine
			"rafamadriz/friendly-snippets", -- Snippet collection
			"onsails/lspkind.nvim", -- lspkind
		},
		opts = function()
			local cmp = require("cmp")
			local luasnip = require("luasnip")
			local lspkind = require("lspkind")

<<<<<<<< Updated upstream:lua/plugins/completion.lua
			cmp.setup({
				experimental = {
					-- only show ghost text when we show ai completions
					-- ghost_text = { hlgroup = "Comment" },
					ghost_text = true,
				},
				formatting = {
					format = lspkind.cmp_format({
						mode = "symbol_text", -- Show both icons and text
						maxwidth = 50, -- Max width of the completion menu
						ellipsis_char = "...", -- Ellipsis when text overflows
						menu = {
							buffer = "[Buffer]",
							nvim_lsp = "[LSP]",
							codeium = "[codeium]",
							luasnip = "[Snip]",
							nvim_lua = "[Lua]",
							path = "[Path]",
						},
					}),
				},
				-- window = {
				-- 	documentation = {
				-- 		border = "rounded", -- Border style: 'single', 'double', 'rounded', 'shadow', or custom
				-- 		winhighlight = "NormalFloat:NormalFloat,FloatBorder:FloatBorder",
				-- 	},
				-- 	completion = {
				-- 		border = "rounded",
				-- 		winhighlight = "NormalFloat:NormalFloat,FloatBorder:FloatBorder",
				-- 	},
				-- },
				snippet = {
					expand = function(args)
						luasnip.lsp_expand(args.body)
========
>>>>>>> Stashed changes
		---@module 'blink.cmp'
		---@type blink.cmp.Config
		opts = {
			snippets = { preset = "luasnip" },
			keymap = {
				preset = "none",
<<<<<<< Updated upstream
				["<Tab>"] = { "select_next", "fallback" },
				["<S-Tab>"] = { "select_prev", "fallback" }, -- show with a list of providers
				["<C-l>"] = {
					function(cmp)
						cmp.show({ providers = { "lsp", "path", "snippets", "buffer", "codeium" } })
					end,
				},
				["<CR>"] = { "accept", "fallback" },
			},

			appearance = {
				nerd_font_variant = "mono",
			},

			completion = {
				documentation = { auto_show = true },
				menu = {
					draw = {
						components = {
							kind_icon = {
								text = function(ctx)
									local icon = ctx.kind_icon
									if vim.tbl_contains({ "Path" }, ctx.source_name) then
										local dev_icon, _ = require("nvim-web-devicons").get_icon(ctx.label)
										if dev_icon then
											icon = dev_icon
										end
									else
										icon = require("lspkind").symbolic(ctx.kind, {
											mode = "symbol_text",
										})
									end

									return icon .. ctx.icon_gap
								end,

								-- Optionally, use the highlight groups from nvim-web-devicons
								-- You can also add the same function for `kind.highlight` if you want to
								-- keep the highlight groups in sync with the icons.
								highlight = function(ctx)
									local hl = ctx.kind_hl
									if vim.tbl_contains({ "Path" }, ctx.source_name) then
										local dev_icon, dev_hl = require("nvim-web-devicons").get_icon(ctx.label)
										if dev_icon then
											hl = dev_hl
										end
									end
									return hl
								end,
							},
						},
					},
				},
			},

=======
				["<Tab>"] = {
					function(cmp)
						cmp.select_next({ auto_insert = false, on_ghost_text = true })
					end,
				},
				["<S-Tab>"] = {
					function(cmp)
						cmp.select_prev({ auto_insert = false, on_ghost_text = true })
					end,
				}, -- show with a list of providers
				["<C-l>"] = {
					function(cmp)
						cmp.show({ providers = { "lsp", "path", "snippets", "buffer", "codeium" } })
>>>>>>>> Stashed changes:lua/plugins/completions.lua.bak
					end,
				},
				mapping = cmp.mapping.preset.insert({
					["<C-k>"] = cmp.mapping.scroll_docs(-4),
					["<C-j>"] = cmp.mapping.scroll_docs(4),
					["<C-l>"] = cmp.mapping.complete(),
					["<CR>"] = cmp.mapping.confirm({ select = true }),
					-- using tab for next completion and previous completion
					["<Tab>"] = cmp.mapping(function(fallback)
						if cmp.visible() then
							cmp.select_next_item()
						elseif luasnip.expand_or_jumpable() then
							luasnip.expand_or_jump()
						else
							fallback()
						end
					end, { "i", "s" }),
					["<S-Tab>"] = cmp.mapping(function(fallback)
						if cmp.visible() then
							cmp.select_prev_item()
						elseif luasnip.jumpable(-1) then
							luasnip.jump(-1)
						else
							fallback()
						end
					end, { "i", "s" }),
				}),

				sources = cmp.config.sources({
					{ name = "nvim_lsp" },
					{ name = "codeium" },
					{ name = "luasnip" },
				}, {
					{ name = "path" },
					{ name = "buffer" },
				}),
			})

			-- Setup for command-line completion
			cmp.setup.cmdline("/", {
				mapping = cmp.mapping.preset.cmdline(),
				sources = {
					{ name = "buffer" },
				},
			})

<<<<<<<< Updated upstream:lua/plugins/completion.lua
			cmp.setup.cmdline(":", {
				mapping = cmp.mapping.preset.cmdline(),
				sources = cmp.config.sources({
					{ name = "path" },
				}, {
					{ name = "cmdline" },
				}),
			})
		end,
========
>>>>>>> Stashed changes
			sources = {
				default = { "lsp", "path", "snippets", "buffer", "codeium" },
				providers = {
					codeium = { name = "Codeium", module = "codeium.blink", async = true },
				},
			},
			fuzzy = { implementation = "prefer_rust_with_warning" },
		},
<<<<<<< Updated upstream
		opts_extend = { "sources.default" },
=======

		cmdline = {
			keymap = {
				["<Tab>"] = { "show_and_insert", "select_next" },
				["<S-Tab>"] = { "show_and_insert", "select_prev" },
				["<CR>"] = { "select_and_accept", "fallback" },
				["<C-l>"] = { "show" },
			},
			completion = { menu = { auto_show = true }, ghost_text = { enabled = true } },
		},

		opts_extend = { "sources.default" },
>>>>>>>> Stashed changes:lua/plugins/completions.lua.bak
>>>>>>> Stashed changes
	},
}
